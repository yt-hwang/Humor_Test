import React from "react";

export interface AxisScores {
  OI: number;
  NB: number; // Intuitive vs Abstract
  VP: number;
  BD: number;
}

type Suggestions = {
  strengths: string[];
  weaknesses: string[];
};

function getLean(value: number): "A" | "B" | "N" {
  const delta = value - 4; // negative => BÏ∏°, positive => AÏ∏° (Ï∂ï Ìï¥ÏÑùÏóê Ï£ºÏùò)
  if (Math.abs(delta) < 0.25) return "N"; // Í±∞Ïùò Ï§ëÎ¶ΩÏù¥Î©¥ Ï†úÏô∏
  return delta > 0 ? "A" : "B";
}

function buildSuggestions(scores: AxisScores): Suggestions {
  const result: Suggestions = { strengths: [], weaknesses: [] };

  // OI: A=Organized(>4), B=Improvised(<4)
  const oiLean = getLean(scores.OI);
  if (oiLean === "A") {
    result.strengths.push(
      "ÎØ∏Î¶¨ Ï§ÄÎπÑÎ•º ÏûòÌï¥Ïöî. ÌùêÎ¶ÑÏù¥ ÏïàÏ†ïÏ†ÅÏù¥ÏóêÏöî",
      "ÎêòÌíÄÏù¥ Ìè¨Ïù∏Ìä∏(ÏΩúÎ∞±) Í∞ôÏùÄ Ïû•ÏπòÎ•º ÍπîÎÅîÌïòÍ≤å Ïç®Ïöî"
    );
    result.weaknesses.push(
      "ÏòàÏÉÅ Î∞ñ ÏÉÅÌô©Ïóê Ï°∞Í∏à Íµ≥ÏùÑ Ïàò ÏûàÏñ¥Ïöî",
      "Ï§ÄÎπÑÏóê Ïã†Í≤Ω Ïì∞Îã§ ÌÉÄÏù¥Î∞çÏùÑ ÎÜìÏπ† ÎïåÍ∞Ä ÏûàÏñ¥Ïöî"
    );
  } else if (oiLean === "B") {
    result.strengths.push(
      "ÏàúÍ∞Ñ ÏÑºÏä§Í∞Ä Ï¢ãÏïÑÏöî. Î∞õÏïÑÏπòÍ∏∞Í∞Ä Îπ®ÎùºÏöî",
      "ÎèåÎ∞ú Ï†ÑÌôòÏúºÎ°ú Î∂ÑÏúÑÍ∏∞Î•º ÏÇ¥Î†§Ïöî"
    );
    result.weaknesses.push(
      "Í∏∏Í≤å ÏåìÎäî Ïù¥ÏïºÍ∏∞Ïóî ÌûòÏù¥ Îπ†Ïßà Ïàò ÏûàÏñ¥Ïöî",
      "ÎßâÌåêÏóê Î™∞ÏïÑÏÑú ÌïòÎã§ ÌÄÑÎ¶¨Ìã∞Í∞Ä Îì§Ïë•ÎÇ†Ïë•Ìï† Ïàò ÏûàÏñ¥Ïöî"
    );
  }

  // NB: A=Intuitive(>4), B=Abstract(<4)
  const nbLean = getLean(scores.NB);
  if (nbLean === "A") {
    result.strengths.push(
      "ÏÉÅÌô©ÏùÑ Îπ®Î¶¨ ÏùΩÍ≥† Í≥µÍ∞ê Ìè¨Ïù∏Ìä∏Î•º Ïûò Ïû°ÏïÑÏöî",
      "ÌòÑÏã§Ï†ÅÏù∏ ÎîîÌÖåÏùºÎ°ú Î™∞ÏûÖÏùÑ ÎßåÎì§Ïñ¥Ïöî"
    );
    result.weaknesses.push(
      "ÏïÑÏù¥ÎîîÏñ¥Í∞Ä ÌèâÎ≤îÌï¥ Î≥¥Ïùº ÎïåÍ∞Ä ÏûàÏñ¥Ïöî",
      "Ï∂îÏÉÅ/Î©îÌÉÄ Ïû•ÏπòÎäî Îçú Ïì∞Îäî Ìé∏Ïù¥ÏóêÏöî"
    );
  } else if (nbLean === "B") {
    result.strengths.push(
      "ÎèÖÌäπÌïú Î∞úÏÉÅÍ≥º ÎπÑÏú†Í∞Ä ÎßéÏïÑÏöî",
      "Î©îÌÉÄ Ïú†Î®∏Î°ú ÏÉàÎ°úÏõÄÏùÑ Ïûò ÎßåÎì§Ïñ¥Ïöî"
    );
    result.weaknesses.push(
      "Ï°∞Í∏à Ïñ¥Î†µÍ≤å ÎäêÍª¥Ïßà Ïàò ÏûàÏñ¥Ïöî. ÏÑ§Î™Ö Ìïú Ï§ÑÏù¥ ÎèÑÏõÄÏù¥ ÎèºÏöî",
      "ÏÉÅÌô©Í≥º ÎèôÎñ®Ïñ¥Ï†∏ Î≥¥Ïùº ÎïåÍ∞Ä ÏûàÏñ¥Ïöî"
    );
  }

  // VP: A=Verbal(>4), B=Physical(<4)
  const vpLean = getLean(scores.VP);
  if (vpLean === "A") {
    result.strengths.push(
      "ÏõåÎî©¬∑ÌÉÄÏù¥Î∞çÏù¥ Ï†ïÌôïÌï¥Ïöî",
      "ÏßßÏùÄ ÌïúÎßàÎîîÎ°ú Î∂ÑÏúÑÍ∏∞Î•º Î∞îÍøîÏöî"
    );
    result.weaknesses.push(
      "ÌëúÏ†ï¬∑Î™∏Ïßì Í∞ôÏùÄ Ïã†Ï≤¥ ÌëúÌòÑÏùÑ Îçú Ïì∞Îäî Ìé∏Ïù¥ÏóêÏöî",
      "ÎßêÏù¥ Í∏∏Ïñ¥ÏßÄÎ©¥ ÌÖúÌè¨Í∞Ä Îñ®Ïñ¥Ïßà Ïàò ÏûàÏñ¥Ïöî"
    );
  } else if (vpLean === "B") {
    result.strengths.push(
      "ÌëúÏ†ï¬∑Î™∏Ïßì¬∑ÎèôÏÑ†ÏúºÎ°ú Ïû•Î©¥ÏùÑ ÏÇ¥Î†§Ïöî",
      "Îßê ÏóÜÏù¥ÎèÑ Ï†ÑÎã¨Î†•Ïù¥ Ï¢ãÏïÑÏöî"
    );
    result.weaknesses.push(
      "ÎßêÎßõÏúºÎ°ú ÏπòÎäî ÌïúÎ∞©Ïù¥ ÏïΩÌï† Ïàò ÏûàÏñ¥Ïöî",
      "ÏÑ§Î™ÖÏù¥ Î∂ÄÏ°±ÌïòÎ©¥ Ïò§Ìï¥Í∞Ä ÏÉùÍ∏∏ Ïàò ÏûàÏñ¥Ïöî"
    );
  }

  // BD: A=Bright(>4), B=Dark(<4)
  const bdLean = getLean(scores.BD);
  if (bdLean === "A") {
    result.strengths.push(
      "Î∞ùÏùÄ ÌÜ§ÏúºÎ°ú Î∂ÑÏúÑÍ∏∞Î•º Í∏àÎ∞© ÎùÑÏõåÏöî",
      "ÎàÑÍµ¨ÎÇò Ìé∏ÌïòÍ≤å ÏõÉÏùÑ Ïàò ÏûàÏñ¥Ïöî"
    );
    result.weaknesses.push(
      "Ïó¨Ïö¥Ïù¥ Ï†ÅÏñ¥ Í∞ÄÎ≥çÍ≤å ÎäêÍª¥Ïßà Ïàò ÏûàÏñ¥Ïöî",
      "ÏßÑÏßÄÌïú Î©îÏãúÏßÄÏôÄÎäî Í±∞Î¶¨Í∞Ä ÏûàÏñ¥Ïöî"
    );
  } else if (bdLean === "B") {
    result.strengths.push(
      "Î∏îÎûôÏú†Î®∏¬∑ÌíçÏûêÎ°ú ÏûÑÌå©Ìä∏Í∞Ä Ïª§Ïöî",
      "ÏõÉÏùå Îí§Ïóê ÏÉùÍ∞ÅÍ±∞Î¶¨Î•º ÎÇ®Í≤®Ïöî"
    );
    result.weaknesses.push(
      "ÌÜ§Ïù¥ Î¨µÏßÅÌï¥ Î∂ÄÎã¥Ïä§ÎüΩÍ≤å ÎäêÍª¥Ïßà Ïàò ÏûàÏñ¥Ïöî",
      "ÌîºÎ°úÍ∞êÏùÑ Ï§Ñ Ïàò ÏûàÏúºÎãà Í∞ïÏïΩ Ï°∞Ï†àÏù¥ ÌïÑÏöîÌï¥Ïöî"
    );
  }

  // ÏÉÅÏúÑ 6Í∞úÎßå ÎÖ∏Ï∂ú (Ï§ëÎ≥µ ÎßéÏúºÎ©¥ ÏïûÏ™ΩÏóêÏÑú Ïä¨ÎùºÏù¥Ïä§)
  return {
    strengths: result.strengths.slice(0, 6),
    weaknesses: result.weaknesses.slice(0, 6),
  };
}

export default function StrengthsWeaknesses({ scores }: { scores: AxisScores }) {
  const { strengths, weaknesses } = buildSuggestions(scores);

  return (
    <div className="bg-white/60 backdrop-blur-sm rounded-2xl p-6 mb-6 border border-white/30">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Í∞ïÏ†ê */}
        <div>
          <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
            <span>üí™</span>
            Í∞ïÏ†ê
          </h3>
          <ul className="space-y-3">
            {strengths.map((s, idx) => (
              <li key={idx} className="flex items-start gap-2">
                <span className="text-green-500 mt-0.5">‚úî</span>
                <span className="text-sm text-gray-700 leading-relaxed">{s}</span>
              </li>
            ))}
          </ul>
        </div>

        {/* ÏïΩÏ†ê */}
        <div>
          <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
            <span>‚ö†Ô∏è</span>
            ÏïΩÏ†ê
          </h3>
          <ul className="space-y-3">
            {weaknesses.map((w, idx) => (
              <li key={idx} className="flex items-start gap-2">
                <span className="text-yellow-500 mt-0.5">!</span>
                <span className="text-sm text-gray-700 leading-relaxed">{w}</span>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
}


